const { ERROR, WARN, OFF } = require('./eslint-consts');

module.exports = {
	rules: {
		//Possible Errors
		'no-cond-assign': ERROR, //disallow assignment in conditional expressions
		'no-console': ERROR, //disallow use of console - use logging library instead
		'no-constant-condition': ERROR, //disallow use of constant expressions in conditions
		'no-control-regex': ERROR, //disallow control characters in regular expressions
		'no-debugger': ERROR, //disallow use of debugger
		'no-dupe-keys': ERROR, //disallow duplicate keys when creating object literals
		'no-empty-character-class': ERROR, //disallow the use of empty character classes in regular expressions
		'no-empty': ERROR, //disallow empty statements
		'no-ex-assign': ERROR, //disallow assigning to the exception in a catch block
		'no-extra-boolean-cast': ERROR, //disallow double-negation boolean casts in a boolean context
		'no-extra-parens': WARN, //disallow unnecessary parentheses
		'no-func-assign': ERROR, //disallow overwriting functions written as function declarations
		'no-inner-declarations': [ERROR, 'functions'], //disallow function or variable declarations in nested blocks
		'no-invalid-regexp': ERROR, //disallow invalid regular expression strings in the RegExp constructor
		'no-irregular-whitespace': ERROR, //disallow irregular whitespace outside of strings and comments
		'no-obj-calls': ERROR, //disallow the use of object properties of the global object (Math and JSON) as functions
		'no-regex-spaces': ERROR, //disallow multiple spaces in a regular expression literal
		'no-sparse-arrays': ERROR, //disallow sparse arrays
		'no-unreachable': OFF, //disallow unreachable statements after a return, throw, continue, or break statement
		'no-unsafe-negation': ERROR, //disallow negation of the left operand of an in expression
		'use-isnan': ERROR, //disallow comparisons with the value NaN
		'valid-jsdoc': OFF, //ensure JSDoc comments are valid
		'valid-typeof': ERROR //ensure that the results of typeof are compared against a valid string
	}
};
