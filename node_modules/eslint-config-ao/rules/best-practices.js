const { ERROR, WARN, OFF } = require('./eslint-consts');

module.exports = {
	rules: {
		//Best Practices
		'block-scoped-var': ERROR, //treat var statements as if they were block scoped
		complexity: OFF, //specify the maximum cyclomatic complexity allowed in a program
		'consistent-return': ERROR, //require return statements to either always or never specify values
		curly: [ERROR, 'all'], //specify curly brace conventions for all control statements
		'default-case': ERROR, //require default case in switch statements
		'dot-notation': ERROR, //encourages use of dot notation whenever possible
		eqeqeq: [ERROR, 'smart'], //[2, "smart"], //require the use of === and !==
		'guard-for-in': ERROR, //make sure for-in loops have an if statement
		'no-alert': ERROR, //disallow the use of alert, confirm, and prompt
		'no-caller': ERROR, //disallow use of arguments.caller or arguments.callee
		'no-div-regex': ERROR, //disallow division operators explicitly at beginning of regular expression
		'no-else-return': ERROR, //disallow else after a return in an if
		'no-labels': ERROR, //disallow use of labels for anything other then loops and switches
		'no-eq-null': OFF, //disallow comparisons to null without a type-checking operator
		'no-eval': ERROR, //disallow use of eval()
		'no-extend-native': ERROR, //disallow adding to native types
		'no-extra-bind': ERROR, //disallow unnecessary function binding
		'no-fallthrough': ERROR, //disallow fallthrough of case statements
		'no-floating-decimal': ERROR, //disallow the use of leading or trailing decimal points in numeric literals
		'no-implied-eval': ERROR, //disallow use of eval()-like methods
		'no-iterator': ERROR, //disallow usage of __iterator__ property
		'no-lone-blocks': ERROR, //disallow unnecessary nested blocks
		'no-loop-func': WARN, //disallow creation of functions within loops
		'no-multi-spaces': [WARN, { exceptions: { Property: false } }], //disallow use of multiple spaces
		'no-multi-str': ERROR, //disallow use of multiline strings
		'no-global-assign': ERROR, //disallow reassignments of native objects
		'no-new': ERROR, //disallow use of new operator when not part of the assignment or comparison
		'no-new-func': ERROR, //disallow use of new operator for Function object
		'no-new-wrappers': ERROR, //disallows creating new instances of String,Number, and Boolean
		'no-octal': ERROR, //disallow use of octal literals
		'no-octal-escape': ERROR, //disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
		'no-proto': ERROR, //disallow usage of __proto__ property
		'no-redeclare': ERROR, //disallow declaring the same variable more then once
		'no-return-assign': ERROR, //disallow use of assignment in return statement
		'no-script-url': ERROR, //disallow use of javascript: urls
		'no-self-compare': ERROR, //disallow comparisons where both sides are exactly the same
		'no-sequences': ERROR, //disallow use of comma operator
		'no-throw-literal': ERROR, //restrict what can be thrown as an exception
		'no-unused-expressions': ERROR, //disallow usage of expressions in statement position
		'no-void': ERROR, //disallow use of void operator
		'no-warning-comments': OFF, //disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
		'no-with': ERROR, //disallow use of the with statement
		radix: ERROR, //require use of the second argument for parseInt()
		'vars-on-top': OFF, //requires to declare all vars on top of their containing scope
		'wrap-iife': [ERROR, 'inside'], //require immediate function invocation to be wrapped in parentheses
		yoda: ERROR, //require or disallow Yoda conditions

		//Strict Mode
		strict: [ERROR, 'global'] //controls location of Use Strict Directives
	}
};
